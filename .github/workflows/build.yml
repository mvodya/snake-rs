name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_NAME: snake-rs
  CARGO_TERM_COLOR: always

# Sets permissions
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  # Build WASM target job
  build-wasm:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: "wasm32-unknown-unknown"
    - name: Install wasm-bindgen from crates.io
      uses: baptiste0928/cargo-install@v3
      with:
        crate: wasm-bindgen-cli
    - name: Setup Cache
      uses: Swatinem/rust-cache@v2
    - name: Build
      run: cargo build --release --target wasm32-unknown-unknown --verbose
    - name: Run wasm-bindgen
      run: wasm-bindgen --no-typescript --target web --out-dir ./web/ --out-name "${PROJECT_NAME}" ./target/wasm32-unknown-unknown/release/${PROJECT_NAME}.wasm
    - name: Upload binaries to artifacts
      uses: actions/upload-artifact@v3
      with:
        path: ./web/
        name: wasm
        retention-days: 1
    - name: Deploy to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./web
        
  # Build Linux target job
  build:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: win-amd64
            runner: windows-latest
            target: x86_64-pc-windows-msvc
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-apple-darwin
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-apple-darwin
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Setup rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        targets: "${{ matrix.target }}"
    - if: matrix.runner == "ubuntu-latest"
      uses: awalsh128/cache-apt-pkgs-action@latest
      with:
        packages: pkg-config libx11-dev libasound2-dev libudev-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev
        version: 1.0
    - name: Setup Cache
      uses: Swatinem/rust-cache@v2
    - name: Build
      run: cargo build --release --target ${{ matrix.target }} --verbose
    - name: Prepare binaries
      shell: bash
      run: |
        BIN_SUFFIX=""
        if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
          BIN_SUFFIX=".exe"
        fi

        BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"

        BIN_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"
        BIN_RELEASE_VERSIONED="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}${BIN_SUFFIX}"

        mkdir -p ./out
        mv "${BIN_OUTPUT}" "./out/${BIN_RELEASE}"
    - name: Upload binaries to artifacts
      uses: actions/upload-artifact@v3
      with:
        path: ./out
        name: ${{ matrix.name }}
        retention-days: 1
  
  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-wasm
    steps:
      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: wasm
          path: ./web
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./web
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
